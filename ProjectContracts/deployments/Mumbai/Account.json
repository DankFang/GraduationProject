{
  "address": "0xFC1441A6F06026b499E2990f7Cd44e87be4B50d7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "entryPoint_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccountLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipCycle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UntrustedImplementation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "LockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "OverrideUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasPermission",
          "type": "bool"
        }
      ],
      "name": "PermissionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_entryPoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receivedTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "overrides",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        },
        {
          "internalType": "address[]",
          "name": "implementations",
          "type": "address[]"
        }
      ],
      "name": "setOverrides",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "callers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_permissions",
          "type": "bool[]"
        }
      ],
      "name": "setPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "missingAccountFunds",
          "type": "uint256"
        }
      ],
      "name": "validateUserOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb78bdddc9d3d33c70bb2d22cfcd450faeb7ba00061d21a36a6e19c17989c25f",
  "receipt": {
    "to": null,
    "from": "0x4ebf8d74b7f022fA729776c94a34FA2617b20E8A",
    "contractAddress": "0xFC1441A6F06026b499E2990f7Cd44e87be4B50d7",
    "transactionIndex": 1,
    "gasUsed": "2164183",
    "logsBloom": "0x
    "blockHash": "0x32019bfe43aa4fa34467fd5d922b9977260ee188323ba2c00c8b90db9c092aba",
    "transactionHash": "0xeb78bdddc9d3d33c70bb2d22cfcd450faeb7ba00061d21a36a6e19c17989c25f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 47904324,
        "transactionHash": "0xeb78bdddc9d3d33c70bb2d22cfcd450faeb7ba00061d21a36a6e19c17989c25f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004ebf8d74b7f022fa729776c94a34fa2617b20e8a",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000231621683b769f0000000000000000000000000000000000000000000000000c965c7b5f74dd53000000000000000000000000000000000000000000000890a321a103b22507c80000000000000000000000000000000000000000000000000c734659f73966b4000000000000000000000000000000000000000000000890a344b7251a607e67",
        "logIndex": 1,
        "blockHash": "0x32019bfe43aa4fa34467fd5d922b9977260ee188323ba2c00c8b90db9c092aba"
      }
    ],
    "blockNumber": 47904324,
    "cumulativeGasUsed": "2193511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAA2777fa3cC68767297762753C9ddF091229eed2",
    "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
  ],
  "numDeployments": 1,
  "solcInputHash": "e51844d10f8d782dfc1b8391c426cecd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"entryPoint_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipCycle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UntrustedImplementation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"LockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"OverrideUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPermission\",\"type\":\"bool\"}],\"name\":\"PermissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_entryPoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedUntil\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receivedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"overrides\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"address[]\",\"name\":\"implementations\",\"type\":\"address[]\"}],\"name\":\"setOverrides\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"callers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_permissions\",\"type\":\"bool[]\"}],\"name\":\"setPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"entryPoint()\":{\"details\":\"Return the ERC-4337 entry point address\"},\"executeCall(address,uint256,bytes)\":{\"details\":\"executes a low-level call against an account if the caller is authorized to make calls\"},\"getNonce()\":{\"details\":\"\\u8fd4\\u56de\\u8d26\\u6237\\u7684nonce\\u5bf9\\u4e8e\\u7279\\u5b9akey\\u7684nonce,\\u4f7f\\u7528entrypoint. getNonce(account, key)\"},\"isAuthorized(address)\":{\"details\":\"Returns the authorization status for a given caller\"},\"isLocked()\":{\"details\":\"returns the current lock status of the account as a boolean\"},\"isValidSignature(bytes32,bytes)\":{\"details\":\"EIP-1271 signature validation. By default, only the owner of the account is permissioned to sign. This function can be overriden.\"},\"lock(uint256)\":{\"details\":\"locks the account until a certain timestamp\"},\"nonce()\":{\"details\":\"Returns the current account nonce\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Allows ERC-1155 token batches to be received. This function can be overriden.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Allows ERC-1155 tokens to be received. This function can be overriden.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Allows ERC-721 tokens to be received so long as they do not cause an ownership cycle. This function can be overriden.\"},\"owner()\":{\"details\":\"Returns the owner of the ERC-721 token which owns this account. By default, the owner of the token has full permissions on the account.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"setOverrides(bytes4[],address[])\":{\"details\":\"sets the implementation address for a given function call\"},\"setPermissions(address[],bool[])\":{\"details\":\"grants a given caller execution permissions\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if a given interfaceId is supported by this account. This method can be extended by an override.\"},\"token()\":{\"details\":\"Returns the EIP-155 chain ID, token contract address, and token ID for the token that owns this account.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"_entryPoint\":{\"details\":\"ERC-4337 entry point address\"},\"guardian\":{\"details\":\"AccountGuardian contract address\"},\"lockedUntil\":{\"details\":\"timestamp at which this account will be unlocked\"},\"overrides\":{\"details\":\"mapping from owner => selector => implementation\"},\"permissions\":{\"details\":\"mapping from owner => caller => has permissions\"}},\"title\":\"A smart contract account owned by a single ERC721 token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getNonce()\":{\"notice\":\"\\u8fd4\\u56de\\u987a\\u5e8f\\u7684\\u4e0b\\u4e00\\u4e2anonce\\u503c\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"\\u9a8c\\u8bc1\\u7528\\u6237\\u7684\\u7b7e\\u540d\\u548cnonce \\u5b50\\u7c7b\\u4e0d\\u9700\\u8981\\u91cd\\u5199\\u6b64\\u65b9\\u6cd5 \\u76f8\\u53cd\\uff0c\\u5b83\\u5e94\\u8be5\\u8986\\u76d6\\u7279\\u5b9a\\u7684\\u5185\\u90e8\\u9a8c\\u8bc1\\u65b9\\u6cd5\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC-6551-Full/Account_src/src/Account.sol\":\"Account\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC-6551-Full/Account_src/src/Account.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IERC6551Account.sol\\\";\\nimport \\\"./lib/ERC6551AccountLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport {BaseAccount as BaseERC4337Account, IEntryPoint, UserOperation} from \\\"./accountBase/account/base/BaseAccount.sol\\\";\\n\\nimport \\\"./interfaces/IAccountGuardian.sol\\\";\\n\\nerror NotAuthorized();\\nerror InvalidInput();\\nerror AccountLocked();\\nerror ExceedsMaxLockTime();\\nerror UntrustedImplementation();\\nerror OwnershipCycle();\\n\\n/**\\n * @title A smart contract account owned by a single ERC721 token\\n */\\ncontract Account is\\n    IERC165,\\n    IERC1271,\\n    IERC6551Account,\\n    IERC721Receiver,\\n    IERC1155Receiver,\\n    UUPSUpgradeable,\\n    BaseERC4337Account\\n{\\n    using ECDSA for bytes32;\\n\\n    /// @dev ERC-4337 entry point address\\n    address public immutable _entryPoint;\\n\\n    /// @dev AccountGuardian contract address\\n    address public immutable guardian;\\n\\n    /// @dev timestamp at which this account will be unlocked\\n    uint256 public lockedUntil;\\n\\n    /// @dev mapping from owner => selector => implementation\\n    mapping(address => mapping(bytes4 => address)) public overrides;\\n\\n    /// @dev mapping from owner => caller => has permissions\\n    mapping(address => mapping(address => bool)) public permissions;\\n\\n    event OverrideUpdated(\\n        address owner,\\n        bytes4 selector,\\n        address implementation\\n    );\\n\\n    event PermissionUpdated(address owner, address caller, bool hasPermission);\\n\\n    event LockUpdated(uint256 lockedUntil);\\n\\n    /// @dev reverts if caller is not the owner of the account\\n    modifier onlyOwner() {\\n        if (msg.sender != owner()) revert NotAuthorized();\\n        _;\\n    }\\n\\n    /// @dev reverts if caller is not authorized to execute on this account\\n    modifier onlyAuthorized() {\\n        if (!isAuthorized(msg.sender)) revert NotAuthorized();\\n        _;\\n    }\\n\\n    /// @dev reverts if this account is currently locked\\n    modifier onlyUnlocked() {\\n        if (isLocked()) revert AccountLocked();\\n        _;\\n    }\\n\\n    constructor(address _guardian, address entryPoint_) {\\n        if (_guardian == address(0) || entryPoint_ == address(0))\\n            revert InvalidInput();\\n\\n        _entryPoint = entryPoint_;\\n        guardian = _guardian;\\n    }\\n\\n    /// @dev allows eth transfers by default, but allows account owner to override\\n    receive() external payable {\\n        _handleOverride();\\n    }\\n\\n    /// @dev allows account owner to add additional functions to the account via an override\\n    fallback() external payable {\\n        _handleOverride();\\n    }\\n\\n    /// @dev executes a low-level call against an account if the caller is authorized to make calls\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable onlyAuthorized onlyUnlocked returns (bytes memory) {\\n        emit TransactionExecuted(to, value, data);\\n\\n        _incrementNonce();\\n\\n        return _call(to, value, data);\\n    }\\n\\n    /// @dev sets the implementation address for a given function call\\n    function setOverrides(\\n        bytes4[] calldata selectors,\\n        address[] calldata implementations\\n    ) external onlyUnlocked {\\n        address _owner = owner();\\n        if (msg.sender != _owner) revert NotAuthorized();\\n\\n        uint256 length = selectors.length;\\n\\n        if (implementations.length != length) revert InvalidInput();\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            overrides[_owner][selectors[i]] = implementations[i];\\n            emit OverrideUpdated(_owner, selectors[i], implementations[i]);\\n        }\\n\\n        _incrementNonce();\\n    }\\n\\n    /// @dev grants a given caller execution permissions\\n    function setPermissions(\\n        address[] calldata callers,\\n        bool[] calldata _permissions\\n    ) external onlyUnlocked {\\n        address _owner = owner();\\n        if (msg.sender != _owner) revert NotAuthorized();\\n\\n        uint256 length = callers.length;\\n\\n        if (_permissions.length != length) revert InvalidInput();\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            permissions[_owner][callers[i]] = _permissions[i];\\n            emit PermissionUpdated(_owner, callers[i], _permissions[i]);\\n        }\\n\\n        _incrementNonce();\\n    }\\n\\n    /// @dev locks the account until a certain timestamp\\n    function lock(uint256 _lockedUntil) external onlyOwner onlyUnlocked {\\n        if (_lockedUntil > block.timestamp + 365 days)\\n            revert ExceedsMaxLockTime();\\n\\n        lockedUntil = _lockedUntil;\\n\\n        emit LockUpdated(_lockedUntil);\\n\\n        _incrementNonce();\\n    }\\n\\n    /// @dev returns the current lock status of the account as a boolean\\n    function isLocked() public view returns (bool) {\\n        return lockedUntil > block.timestamp;\\n    }\\n\\n    /// @dev EIP-1271 signature validation. By default, only the owner of the account is permissioned to sign.\\n    /// This function can be overriden.\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        _handleOverrideStatic();\\n\\n        bool isValid = SignatureChecker.isValidSignatureNow(\\n            owner(),\\n            hash,\\n            signature\\n        );\\n\\n        if (isValid) {\\n            return IERC1271.isValidSignature.selector;\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    /// @dev Returns the EIP-155 chain ID, token contract address, and token ID for the token that\\n    /// owns this account.\\n    function token()\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        )\\n    {\\n        return ERC6551AccountLib.token();\\n    }\\n\\n    /// @dev Returns the current account nonce\\n    function nonce() public view override returns (uint256) {\\n        return IEntryPoint(_entryPoint).getNonce(address(this), 0);\\n    }\\n\\n    /// @dev Increments the account nonce if the caller is not the ERC-4337 entry point\\n    function _incrementNonce() internal {\\n        if (msg.sender != _entryPoint)\\n            IEntryPoint(_entryPoint).incrementNonce(0);\\n    }\\n\\n    /// @dev Return the ERC-4337 entry point address\\n    function entryPoint() public view override returns (IEntryPoint) {\\n        return IEntryPoint(_entryPoint);\\n    }\\n\\n    /// @dev Returns the owner of the ERC-721 token which owns this account. By default, the owner\\n    /// of the token has full permissions on the account.\\n    function owner() public view returns (address) {\\n        (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        ) = ERC6551AccountLib.token();\\n\\n        if (chainId != block.chainid) return address(0);\\n\\n        return IERC721(tokenContract).ownerOf(tokenId);\\n    }\\n\\n    /// @dev Returns the authorization status for a given caller\\n    function isAuthorized(address caller) public view returns (bool) {\\n        // authorize entrypoint for 4337 transactions\\n        if (caller == _entryPoint) return true;\\n\\n        (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        ) = ERC6551AccountLib.token();\\n        address _owner = IERC721(tokenContract).ownerOf(tokenId);\\n\\n        // authorize token owner\\n        if (caller == _owner) return true;\\n\\n        // authorize caller if owner has granted permissions\\n        if (permissions[_owner][caller]) return true;\\n\\n        // authorize trusted cross-chain executors if not on native chain\\n        if (\\n            chainId != block.chainid &&\\n            IAccountGuardian(guardian).isTrustedExecutor(caller)\\n        ) return true;\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns true if a given interfaceId is supported by this account. This method can be\\n    /// extended by an override.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        bool defaultSupport = interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC6551Account).interfaceId;\\n\\n        if (defaultSupport) return true;\\n\\n        // if not supported by default, check override\\n        _handleOverrideStatic();\\n\\n        return false;\\n    }\\n\\n    /// @dev Allows ERC-721 tokens to be received so long as they do not cause an ownership cycle.\\n    /// This function can be overriden.\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 receivedTokenId,\\n        bytes memory\\n    ) public view override returns (bytes4) {\\n        _handleOverrideStatic();\\n\\n        (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        ) = ERC6551AccountLib.token();\\n\\n        if (\\n            chainId == block.chainid &&\\n            tokenContract == msg.sender &&\\n            tokenId == receivedTokenId\\n        ) revert OwnershipCycle();\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @dev Allows ERC-1155 tokens to be received. This function can be overriden.\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public view override returns (bytes4) {\\n        _handleOverrideStatic();\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @dev Allows ERC-1155 token batches to be received. This function can be overriden.\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public view override returns (bytes4) {\\n        _handleOverrideStatic();\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /// @dev Contract upgrades can only be performed by the owner and the new implementation must\\n    /// be trusted\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        view\\n        override\\n        onlyOwner\\n    {\\n        bool isTrusted = IAccountGuardian(guardian).isTrustedImplementation(\\n            newImplementation\\n        );\\n        if (!isTrusted) revert UntrustedImplementation();\\n    }\\n\\n    /// @dev Validates a signature for a given ERC-4337 operation\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal view override returns (uint256 validationData) {\\n        bool isValid = this.isValidSignature(\\n            userOpHash.toEthSignedMessageHash(),\\n            userOp.signature\\n        ) == IERC1271.isValidSignature.selector;\\n\\n        if (isValid) {\\n            return 0;\\n        }\\n\\n        return 1;\\n    }\\n\\n    /// @dev Executes a low-level call\\n    function _call(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal returns (bytes memory result) {\\n        bool success;\\n        (success, result) = to.call{value: value}(data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes a low-level call to the implementation if an override is set\\n    function _handleOverride() internal {\\n        address implementation = overrides[owner()][msg.sig];\\n\\n        if (implementation != address(0)) {\\n            bytes memory result = _call(implementation, msg.value, msg.data);\\n            assembly {\\n                return(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes a low-level static call\\n    function _callStatic(address to, bytes calldata data)\\n        internal\\n        view\\n        returns (bytes memory result)\\n    {\\n        bool success;\\n        (success, result) = to.staticcall(data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes a low-level static call to the implementation if an override is set\\n    function _handleOverrideStatic() internal view {\\n        address implementation = overrides[owner()][msg.sig];\\n\\n        if (implementation != address(0)) {\\n            bytes memory result = _callStatic(implementation, msg.data);\\n            assembly {\\n                return(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65e4aeb1c36709baee13f128daf6f493b86a8f40276bfd626e97540da6c5681f\",\"license\":\"UNLICENSED\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/base/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"../core/Helpers.sol\\\";\\n/**\\n * @title \\u67d0\\u4e9b\\u51fd\\u6570\\u7684\\u5b9e\\u73b0\\u6a21\\u677f\\u7684\\u62bd\\u8c61\\u5408\\u7ea6\\n * @author DankFang\\n * @notice \\u5176\\u4ed6\\u5408\\u7ea6\\u7ee7\\u627f\\u5e76\\u5b9e\\u73b0\\u8fd9\\u4e2a\\u5408\\u7ea6\\u4e2d\\u51fd\\u6570\\u7684\\u7279\\u5b9a\\u903b\\u8f91\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //\\u7b7e\\u540d\\u5931\\u8d25\\u60c5\\u51b5\\u4e0b\\u7684\\u8fd4\\u56de\\u503c\\uff0c\\u4e0d\\u5e26\\u65f6\\u95f4\\u8303\\u56f4\\u3002\\n    // \\u548c _packValidationData(true,0,0) \\u7b49\\u6548\\uff0c\\u5728helper\\u5408\\u7ea6\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * @dev \\u8fd4\\u56de\\u8d26\\u6237\\u7684nonce\\n     * @notice \\u8fd4\\u56de\\u987a\\u5e8f\\u7684\\u4e0b\\u4e00\\u4e2anonce\\u503c\\n     * @dev \\u5bf9\\u4e8e\\u7279\\u5b9akey\\u7684nonce,\\u4f7f\\u7528entrypoint. getNonce(account, key)\\n     */\\n    function getNonce() public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), 0);\\n    }\\n\\n    /**\\n     * @return \\u8fd4\\u56de\\u8be5\\u5e10\\u6237\\u4f7f\\u7528\\u7684entryPoint\\n     * @dev \\u5b50\\u7c7b\\u5e94\\u8be5\\u8fd4\\u56de\\u8be5\\u5e10\\u6237\\u4f7f\\u7528\\u7684\\u5f53\\u524dentryPoint\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * \\u9a8c\\u8bc1\\u7528\\u6237\\u7684\\u7b7e\\u540d\\u548cnonce\\n     * \\u5b50\\u7c7b\\u4e0d\\u9700\\u8981\\u91cd\\u5199\\u6b64\\u65b9\\u6cd5 \\u76f8\\u53cd\\uff0c\\u5b83\\u5e94\\u8be5\\u8986\\u76d6\\u7279\\u5b9a\\u7684\\u5185\\u90e8\\u9a8c\\u8bc1\\u65b9\\u6cd5\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * \\u786e\\u4fdd\\u8bf7\\u6c42\\u6765\\u81ea\\u5df2\\u77e5\\u7684entrypoint\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * \\u9a8c\\u8bc1\\u7b7e\\u540d\\u662f\\u5426\\u6709\\u6548\\n     * @param userOp userOp\\u9a8c\\u8bc1userOp.signature\\n     * @param userOpHash \\u65b9\\u4fbf\\u5b57\\u6bb5:\\u8bf7\\u6c42\\u7684\\u54c8\\u5e0c\\u503c\\uff0c\\u7528\\u6765\\u68c0\\u67e5\\u7b7e\\u540d\\n     *\\uff08\\u8fd8\\u5bf9\\u5165\\u53e3\\u70b9\\u548c\\u94fe ID \\u8fdb\\u884c\\u54c8\\u5e0c\\u5904\\u7406\\uff09\\n     * @return validationData \\u9a8c\\u8bc1\\u6570\\u636e\\u7b7e\\u540d\\u548c\\u672c\\u6b21\\u64cd\\u4f5c\\u7684\\u65f6\\u95f4\\u8303\\u56f4\\n     *      <20-byte> sigAuthorizer - 0 \\u8868\\u793a\\u7b7e\\u540d\\u6709\\u6548\\uff0c1 \\u8868\\u793a\\u7b7e\\u540d\\u5931\\u8d25\\uff0c\\n     *      \\u5426\\u5219\\uff0c\\u6388\\u6743\\u4eba \\u5408\\u7ea6\\u7684\\u5730\\u5740\\u3002\\n     *      <6-byte> validUntil - \\u6b64\\u64cd\\u4f5c\\u6709\\u6548\\u7684\\u6700\\u540e\\u4e00\\u4e2a\\u65f6\\u95f4\\u6233\\u3002 0 \\u4ee3\\u8868 \\u65e0\\u9650\\u671f\\n     *      <6-byte> validAfter - \\u6b64\\u64cd\\u4f5c\\u6709\\u6548\\u7684\\u7b2c\\u4e00\\u4e2a\\u65f6\\u95f4\\u6233\\n     *      \\u5982\\u679c\\u8d26\\u6237\\u4e0d\\u4f7f\\u7528\\u65f6\\u95f4\\u8303\\u56f4\\uff0c\\u5219\\u7b7e\\u540d\\u5931\\u8d25\\u8fd4\\u56de SIG_VALIDATION_FAILED \\u503c (1) \\u5373\\u53ef\\n     *      \\n     *      \\u6ce8\\u610f\\u9a8c\\u8bc1\\u7801\\u4e0d\\u80fd\\u4f7f\\u7528 block.timestamp (\\u6216\\u8005 block.number) \\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\n    internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * \\u9a8c\\u8bc1UserOperation\\u7684nonce\\n     * \\u8be5\\u65b9\\u6cd5\\u53ef\\u4ee5\\u9a8c\\u8bc1\\u8be5\\u8d26\\u6237\\u7684nonce\\u8981\\u6c42\\n     * e.g.\\n     * \\u9650\\u5236\\u968f\\u673a\\u6570\\u4ec5\\u4f7f\\u7528\\u6709\\u5e8f\\u7684 UserOps\\uff08\\u6ca1\\u6709\\u65e0\\u5e8f\\u7684UserOps\\uff09:\\n     *      `require(nonce < type(uint64).max)`\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\n     *      `require(nonce & type(uint64).max == 0)`\\n     *\\n     *  \\u5b9e\\u9645\\u7684\\u968f\\u673a\\u6570\\u552f\\u4e00\\u6027\\u7531 EntryPoint \\u7ba1\\u7406\\uff0c\\u56e0\\u6b64\\u6ca1\\u6709\\u5176\\u4ed6\\u5e10\\u6237\\u672c\\u8eab\\u9700\\u8981\\u91c7\\u53d6\\u884c\\u52a8\\n     * \\n     *\\n     * @param nonce to validate\\n     *\\n     * solhint-disable-next-line no-empty-blocks\\n     */\\n    function _validateNonce(uint256 nonce) internal view virtual {\\n    }\\n\\n    /**\\n     * \\u50cf entrypoint (msg.sender) \\u53d1\\u9001\\u6b64\\u4ea4\\u6613\\u7f3a\\u5c11\\u7684\\u8d44\\u91d1\\n     * \\u5b50\\u7c7b\\u53ef\\u4ee5\\u91cd\\u5199\\u6b64\\u65b9\\u6cd5\\u4ee5\\u66f4\\u597d\\u5730\\u7ba1\\u7406\\u8d44\\u91d1\\n     * (e.g.\\u53d1\\u9001\\u5230\\u5165\\u53e3\\u70b9\\u7684\\u6570\\u91cf\\u8d85\\u8fc7\\u6240\\u9700\\u7684\\u6700\\u5c0f\\u503c\\uff0c\\u4ee5\\u4fbf\\u5728\\u5c06\\u6765\\u7684\\u4ea4\\u6613\\u4e2d\\u65e0\\u9700\\u518d\\u6b21\\u53d1\\u9001)\\n     * @param missingAccountFunds \\u8be5\\u65b9\\u6cd5\\u5e94\\u8be5\\u5411 entrypoint \\u53d1\\u9001\\u7684\\u6700\\u5c0f\\u8d44\\u91d1\\n     *  \\u5982\\u679c\\u6709\\u8db3\\u591f\\u7684\\u5b58\\u6b3e\\uff0c\\u6216\\u8005 userOp \\u6709\\u4ed8\\u6b3e\\u4eba\\uff0c\\u5219\\u8be5\\u503c\\u53ef\\u80fd\\u4e3a\\u96f6\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d1292f59a8b4b43513404470babeaea07491208f3cca2bd905470d87b10277c\",\"license\":\"GPL-3.0\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * \\u4ecevalidateUserOp\\u8fd4\\u56dedata\\u6570\\u636e\\n * validateUserOp \\u8fd4\\u56de\\u4e00\\u4e2a uint256, \\u7531' _packedValidationData '\\u521b\\u5efa\\uff0c\\u5e76\\u7531' _parseValidationData '\\u89e3\\u6790\\n * @param aggregator - address(0) - \\u8be5\\u5e10\\u6237\\u81ea\\u884c\\u9a8c\\u8bc1\\u4e86\\u7b7e\\u540d.\\n *              address(1) - \\u8be5\\u5e10\\u6237\\u672a\\u80fd\\u9a8c\\u8bc1\\u7b7e\\u540d.\\n *              otherwise - \\u8fd9\\u662f\\u7b7e\\u540d\\u805a\\u5408\\u5668\\u7684\\u5730\\u5740\\uff0c\\u5fc5\\u987b\\u7528\\u4e8e\\u9a8c\\u8bc1\\u7b7e\\u540d\\n * @param validAfter - \\u8fd9\\u4e2aUserOp\\u53ea\\u6709\\u5728\\u8fd9\\u4e2a\\u65f6\\u95f4\\u6233\\u4e4b\\u540e\\u624d\\u6709\\u6548.\\n * @param validaUntil - \\u8fd9\\u4e2aUserOp\\u53ea\\u5728\\u8fd9\\u4e2a\\u65f6\\u95f4\\u6233\\u524d\\u6709\\u6548.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//\\u63d0\\u53d6 sigFailed, validAfter, validUntil.\\n//\\u4e5f\\u5c06 zero validUntil \\u8f6c\\u5316\\u4e3a to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// \\u4e0eaccount\\u4ea4\\u4e92\\u5e76\\u7ed9\\u51fapaymaster \\u7684\\u8303\\u56f4.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper \\u6253\\u5305validateUserOp\\u7684\\u8fd4\\u56de\\u503c\\n * @param data - \\u6253\\u5305\\u7684 ValidationData \\u7684\\u8fd4\\u56de\\u503c\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper \\u6253\\u5305\\u7684 ValidationData \\u7684\\u8fd4\\u56de\\u503c, \\u5f53\\u4e0d\\u4f7f\\u7528aggregator\\u65f6\\n * @param sigFailed - true \\u8868\\u793a\\u7b7e\\u540d\\u5931\\u8d25, false \\u8868\\u793a\\u6210\\u529f\\n * @param validUntil \\u6700\\u540e\\u4e00\\u4e2a\\u65f6\\u95f4\\u6233\\u8fd9\\u4e2aUserOperation\\u662f\\u6709\\u6548\\u7684(\\u6216\\u8005\\u4e3a\\u96f6\\u8868\\u793a\\u65e0\\u9650)\\n * @param validAfter UserOperation\\u7684\\u7b2c\\u4e00\\u4e2a\\u65f6\\u95f4\\u6233\\u6709\\u6548\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * keccak calldata\\u4e0a\\u7684\\u6570\\u636e\\u7684\\u51fd\\u6570.\\u5373\\u5bf9calldata\\u7684\\u6570\\u636e\\u8fdb\\u884ckeccak\\u52a0\\u5bc6\\u64cd\\u4f5c\\n * @dev \\u590d\\u5236 calldata\\u5230 memory, keccak\\u52a0\\u5bc6\\u5e76\\u4e14\\u4e0b\\u6c89\\u5230\\u5206\\u914d\\u7684 memory. \\u8fd9\\u6bd4solidity\\u8bed\\u6cd5\\u66f4\\u9ad8\\u6548\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\",\"keccak256\":\"0x732ae03e14ac19a05b1e3941655303a399dc359201a028a4836587176c3c42a4\",\"license\":\"GPL-3.0\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"../library/UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\",\"keccak256\":\"0x46f432c31d34846b0d89b50591f76c2df2235ac90dfdea68a44d877949d6b5f0\",\"license\":\"GPL-3.0\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"../library/UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\",\"keccak256\":\"0x1ace0fd8a9fdeaa5068c53645a8b0a75ef1d9f44cdbb8cd0e612cd04ed27793a\",\"license\":\"GPL-3.0\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"../library/UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\"; \\nimport \\\"./IAggregator.sol\\\";    \\nimport \\\"./INonceManager.sol\\\"; \\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\",\"keccak256\":\"0x9e01332ec3817a71f6b210faa810e72e84be69b69a32ef1a2c6d227788c2b249\",\"license\":\"GPL-3.0\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\",\"keccak256\":\"0x1097bb49eed85a9b867aaa812cce56e3307d3451c39d69c0eb46f47703afc4b3\",\"license\":\"GPL-3.0\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\",\"keccak256\":\"0x95ff0f8d8faf7706d7e36035e4f8f140923dba29da22aff22fbec8420ac9caa2\",\"license\":\"GPL-3.0-only\"},\"contracts/ERC-6551-Full/Account_src/src/accountBase/account/library/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * \\u5f53\\u9047\\u5230\\u4f7f\\u7528UserOperation structs\\u65f6\\u9700\\u8981\\u7528\\u5230\\u7684\\u5e2e\\u52a9\\u51fd\\u6570\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    // relayer/block builder\\u53ef\\u80fd\\u4f1a\\u63d0\\u4ea4\\u5177\\u6709\\u66f4\\u9ad8\\u4f18\\u5148\\u7ea7\\u8d39\\u7528\\u7684\\u4ea4\\u6613\\uff0c\\u4f46\\u7528\\u6237\\u4e0d\\u5e94\\u8be5\\u8fd9\\u6837\\u505a\\n    // \\u652f\\u4ed8\\u9ad8\\u4e8e\\u4ed6\\u7b7e\\u540d\\u7684\\u8d39\\u7528\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode \\u4f20\\u7edf\\u6a21\\u5f0f\\uff08\\u9002\\u7528\\u4e8e\\u4e0d\\u652f\\u6301 basefee \\u64cd\\u4f5c\\u7801\\u7684\\u7f51\\u7edc\\uff09\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\",\"keccak256\":\"0xdd7dee576ac7b5d3c5aded3434ee0d72dbc44a6df165a6c944df2a82592a4598\",\"license\":\"GPL-3.0\"},\"contracts/ERC-6551-Full/Account_src/src/interfaces/IAccountGuardian.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IAccountGuardian {\\n    function setTrustedImplementation(address implementation, bool trusted)\\n        external;\\n\\n    function setTrustedExecutor(address executor, bool trusted) external;\\n\\n    function defaultImplementation() external view returns (address);\\n\\n    function isTrustedImplementation(address implementation)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isTrustedExecutor(address implementation)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x6b0b1b96e97075546e0f8c0b98590e368f25d771b2497be69b15738b3715ea40\",\"license\":\"UNLICENSED\"},\"contracts/ERC-6551-Full/Account_src/src/interfaces/IERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IERC6551AccountProxy {\\n    function implementation() external view returns (address);\\n}\\n\\n/// @dev the ERC-165 identifier for this interface is `0xeff4d378`\\ninterface IERC6551Account {\\n    event TransactionExecuted(address indexed target, uint256 indexed value, bytes data);\\n\\n    receive() external payable;\\n\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n\\n    function token()\\n        external\\n        view\\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function nonce() external view returns (uint256);\\n}\",\"keccak256\":\"0xc315c88b2fbb0b53879089fb07c3e5ed540e7dfd3e17f225a6532b12d9c22061\",\"license\":\"UNLICENSED\"},\"contracts/ERC-6551-Full/Account_src/src/lib/ERC6551AccountLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary ERC6551AccountLib {\\n    function token()\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            address,\\n            uint256\\n        )\\n    {\\n        bytes memory footer = new bytes(0x60);\\n\\n        assembly {\\n            // copy 0x60 bytes from end of footer\\n            extcodecopy(address(), add(footer, 0x20), 0x4d, 0xad)\\n        }\\n\\n        return abi.decode(footer, (uint256, address, uint256));\\n    }\\n\\n    function salt() internal view returns (uint256) {\\n        bytes memory footer = new bytes(0x20);\\n\\n        assembly {\\n            // copy 0x20 bytes from beginning of footer\\n            extcodecopy(address(), add(footer, 0x20), 0x2d, 0x4d)\\n        }\\n\\n        return abi.decode(footer, (uint256));\\n    }\\n}\",\"keccak256\":\"0xd6ac35c215f5e8f7d049ee168529c0e37f491d9408881c1ad04bf1229af1e9fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052306080523480156200001557600080fd5b506040516200279a3803806200279a8339810160408190526200003891620000aa565b6001600160a01b03821615806200005657506001600160a01b038116155b15620000755760405163b4fa3fb360e01b815260040160405180910390fd5b6001600160a01b0390811660a0521660c052620000e2565b80516001600160a01b0381168114620000a557600080fd5b919050565b60008060408385031215620000be57600080fd5b620000c9836200008d565b9150620000d9602084016200008d565b90509250929050565b60805160a05160c05161262d6200016d600039600081816102ca0152818161119701526114b00152600081816103bc015281816103f201528181610e5c01528181610f1801528181611049015281816112ff0152818161133a01526116b801526000818161089e015281816108e7015281816109a9015281816109e90152610a7c015261262d6000f3fe60806040526004361061016a5760003560e01c80639e5d4c49116100d1578063ce0617ec1161008a578063ee9c605411610064578063ee9c60541461047f578063f23a6e61146104c0578063fc0c546a146104e0578063fe9fbb801461051857610179565b8063ce0617ec14610434578063d087d2881461044a578063dd4670641461045f57610179565b80639e5d4c4914610361578063a4e2d63414610381578063affed0e014610398578063b0d691fe146103ad578063b3080c24146103e0578063bc197c811461041457610179565b80633a871cdd116101235780633a871cdd1461028a578063452a9320146102b85780634f1ef2861461030457806352d1902d146103175780637a8f73561461032c5780638da5cb5b1461034c57610179565b806301ffc9a714610181578063039721b1146101b6578063150b7a02146101d65780631626ba7e1461020f5780631f9838b51461022f5780633659cfe61461026a57610179565b3661017957610177610538565b005b610177610538565b34801561018d57600080fd5b506101a161019c366004611d05565b61059f565b60405190151581526020015b60405180910390f35b3480156101c257600080fd5b506101776101d1366004611d66565b61060e565b3480156101e257600080fd5b506101f66101f1366004611e9b565b6107df565b6040516001600160e01b031990911681526020016101ad565b34801561021b57600080fd5b506101f661022a366004611f06565b610852565b34801561023b57600080fd5b506101a161024a366004611f4c565b600260209081526000928352604080842090915290825290205460ff1681565b34801561027657600080fd5b50610177610285366004611f85565b610894565b34801561029657600080fd5b506102aa6102a5366004611fa2565b610979565b6040519081526020016101ad565b3480156102c457600080fd5b506102ec7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101ad565b610177610312366004611ff5565b61099f565b34801561032357600080fd5b506102aa610a6f565b34801561033857600080fd5b50610177610347366004611d66565b610b22565b34801561035857600080fd5b506102ec610cfb565b61037461036f36600461202e565b610d91565b6040516101ad9190612106565b34801561038d57600080fd5b5060005442106101a1565b3480156103a457600080fd5b506102aa610e3d565b3480156103b957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102ec565b3480156103ec57600080fd5b506102ec7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042057600080fd5b506101f661042f366004612198565b610ed5565b34801561044057600080fd5b506102aa60005481565b34801561045657600080fd5b506102aa610ef1565b34801561046b57600080fd5b5061017761047a366004612245565b610f47565b34801561048b57600080fd5b506102ec61049a36600461225e565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b3480156104cc57600080fd5b506101f66104db36600461228c565b611011565b3480156104ec57600080fd5b506104f561102d565b604080519384526001600160a01b039092166020840152908201526060016101ad565b34801561052457600080fd5b506101a1610533366004611f85565b611045565b600060016000610546610cfb565b6001600160a01b039081168252602080830193909352604091820160009081206001600160e01b03198235168252909352912054169050801561059c576000610592823460003661121f565b9050805160208201f35b50565b6000806001600160e01b031983166301ffc9a760e01b14806105d157506001600160e01b03198316630271189760e51b145b806105ec57506001600160e01b03198316630801407360e31b145b905080156105fd5750600192915050565b61060561129b565b50600092915050565b60005442101561063157604051636315bfbb60e01b815260040160405180910390fd5b600061063b610cfb565b9050336001600160a01b038216146106665760405163ea8e4eb560e01b815260040160405180910390fd5b838281146106875760405163b4fa3fb360e01b815260040160405180910390fd5b60005b818110156107ce578484828181106106a4576106a46122f4565b90506020020160208101906106b99190612318565b6001600160a01b0384166000908152600260205260408120908989858181106106e4576106e46122f4565b90506020020160208101906106f99190611f85565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f394777a58092892d136a90c4bb7e4350c72ac50fba6a0208128677f36527dcf583888884818110610755576107556122f4565b905060200201602081019061076a9190611f85565b87878581811061077c5761077c6122f4565b90506020020160208101906107919190612318565b604080516001600160a01b03948516815293909216602084015215159082015260600160405180910390a1806107c68161234b565b91505061068a565b506107d76112f4565b505050505050565b60006107e961129b565b60008060006107f66113a1565b925092509250468314801561081357506001600160a01b03821633145b801561081e57508581145b1561083c5760405163b79e3f3f60e01b815260040160405180910390fd5b50630a85bd0160e11b925050505b949350505050565b600061085c61129b565b6000610870610869610cfb565b85856113f4565b905080156108885750630b135d3f60e11b905061088e565b60009150505b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108e55760405162461bcd60e51b81526004016108dc90612364565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661092e6000805160206125b1833981519152546001600160a01b031690565b6001600160a01b0316146109545760405162461bcd60e51b81526004016108dc906123b0565b61095d81611455565b6040805160008082526020820190925261059c9183919061153d565b60006109836116ad565b61098d8484611725565b905061099882611801565b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109e75760405162461bcd60e51b81526004016108dc90612364565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a306000805160206125b1833981519152546001600160a01b031690565b6001600160a01b031614610a565760405162461bcd60e51b81526004016108dc906123b0565b610a5f82611455565b610a6b8282600161153d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b0f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108dc565b506000805160206125b183398151915290565b600054421015610b4557604051636315bfbb60e01b815260040160405180910390fd5b6000610b4f610cfb565b9050336001600160a01b03821614610b7a5760405163ea8e4eb560e01b815260040160405180910390fd5b83828114610b9b5760405163b4fa3fb360e01b815260040160405180910390fd5b60005b818110156107ce57848482818110610bb857610bb86122f4565b9050602002016020810190610bcd9190611f85565b6001600160a01b038416600090815260016020526040812090898985818110610bf857610bf86122f4565b9050602002016020810190610c0d9190611d05565b6001600160e01b0319168152602081019190915260400160002080546001600160a01b0319166001600160a01b03929092169190911790557f2c722487e90aca38ec1b074c3403210bd2bfb769b4da7f12f7bf0b9e37517c1883888884818110610c7957610c796122f4565b9050602002016020810190610c8e9190611d05565b878785818110610ca057610ca06122f4565b9050602002016020810190610cb59190611f85565b604080516001600160a01b0394851681526001600160e01b031993909316602084015292168183015290519081900360600190a180610cf38161234b565b915050610b9e565b600080600080610d096113a1565b925092509250468314610d20576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8991906123fc565b935050505090565b6060610d9c33611045565b610db95760405163ea8e4eb560e01b815260040160405180910390fd5b600054421015610ddc57604051636315bfbb60e01b815260040160405180910390fd5b83856001600160a01b03167f47d99ad340f52da66535aff7e10da1ceb85a32bcbd9fa1c42314d194545e14d28585604051610e18929190612442565b60405180910390a3610e286112f4565b610e348585858561121f565b95945050505050565b604051631aab3f0d60e11b8152306004820152600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a906044015b602060405180830381865afa158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190612456565b905090565b6000610edf61129b565b5063bc197c8160e01b95945050505050565b604051631aab3f0d60e11b8152306004820152600060248201819052906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610e8f565b610f4f610cfb565b6001600160a01b0316336001600160a01b031614610f805760405163ea8e4eb560e01b815260040160405180910390fd5b600054421015610fa357604051636315bfbb60e01b815260040160405180910390fd5b610fb1426301e1338061246f565b811115610fd1576040516301814f7d60e31b815260040160405180910390fd5b60008190556040518181527fa7b24c66dd3269a292a60b3facdbb8f3e7557d1e19e64d99e0d6ee7250be63ad9060200160405180910390a161059c6112f4565b600061101b61129b565b5063f23a6e6160e01b95945050505050565b600080600061103a6113a1565b925092509250909192565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361108857506001919050565b60008060006110956113a1565b9250925092506000826001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016110cb91815260200190565b602060405180830381865afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c91906123fc565b9050806001600160a01b0316866001600160a01b0316036111335750600195945050505050565b6001600160a01b038082166000908152600260209081526040808320938a168352929052205460ff161561116d5750600195945050505050565b46841415801561120257506040516333932be560e11b81526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063672657ca90602401602060405180830381865afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190612482565b156112135750600195945050505050565b50600095945050505050565b60606000856001600160a01b031685858560405161123e92919061249f565b60006040518083038185875af1925050503d806000811461127b576040519150601f19603f3d011682016040523d82523d6000602084013e611280565b606091505b50925090508061129257815160208301fd5b50949350505050565b6000600160006112a9610cfb565b6001600160a01b039081168252602080830193909352604091820160009081206001600160e01b03198235168252909352912054169050801561059c5760006105928260003661185a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461139f57604051630bd28e3b60e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630bd28e3b90602401600060405180830381600087803b15801561138657600080fd5b505af115801561139a573d6000803e3d6000fd5b505050505b565b604080516060808252608082019092526000918291829182919060208201818036833701905050905060ad604d60208301303c808060200190518101906113e891906124af565b93509350935050909192565b600080600061140385856118d2565b9092509050600081600481111561141c5761141c6124e8565b14801561143a5750856001600160a01b0316826001600160a01b0316145b8061144b575061144b868686611917565b9695505050505050565b61145d610cfb565b6001600160a01b0316336001600160a01b03161461148e5760405163ea8e4eb560e01b815260040160405180910390fd5b604051631506fd4d60e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631506fd4d90602401602060405180830381865afa1580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d9190612482565b905080610a6b57604051635abead2f60e11b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115755761157083611a03565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156115cf575060408051601f3d908101601f191682019092526115cc91810190612456565b60015b6116325760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016108dc565b6000805160206125b183398151915281146116a15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016108dc565b50611570838383611a9f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461139f5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016108dc565b600080630b135d3f60e11b30631626ba7e61176d867f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b61177b6101408901896124fe565b6040518463ffffffff1660e01b815260040161179993929190612544565b602060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da919061255e565b6001600160e01b03191614905080156117f757600091505061088e565b5060019392505050565b801561059c57604051600090339060001990849084818181858888f193505050503d806000811461184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b606091505b5050505050565b60606000846001600160a01b0316848460405161187892919061249f565b600060405180830381855afa9150503d80600081146118b3576040519150601f19603f3d011682016040523d82523d6000602084013e6118b8565b606091505b5092509050806118ca57815160208301fd5b509392505050565b60008082516041036119085760208301516040840151606085015160001a6118fc87828585611ac4565b94509450505050611910565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b868660405160240161194192919061257b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161197f9190612594565b600060405180830381855afa9150503d80600081146119ba576040519150601f19603f3d011682016040523d82523d6000602084013e6119bf565b606091505b50915091508180156119d357506020815110155b801561144b57508051630b135d3f60e11b906119f89083016020908101908401612456565b149695505050505050565b6001600160a01b0381163b611a705760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108dc565b6000805160206125b183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611aa883611b88565b600082511180611ab55750805b156115705761139a8383611bc8565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611afb5750600090506003611b7f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611b4f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b7857600060019250925050611b7f565b9150600090505b94509492505050565b611b9181611a03565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061099883836040518060600160405280602781526020016125d1602791396060600080856001600160a01b031685604051611c059190612594565b600060405180830381855af49150503d8060008114611c40576040519150601f19603f3d011682016040523d82523d6000602084013e611c45565b606091505b509150915061144b8683838760608315611cc0578251600003611cb9576001600160a01b0385163b611cb95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108dc565b508161084a565b61084a8383815115611cd55781518083602001fd5b8060405162461bcd60e51b81526004016108dc9190612106565b6001600160e01b03198116811461059c57600080fd5b600060208284031215611d1757600080fd5b813561099881611cef565b60008083601f840112611d3457600080fd5b5081356001600160401b03811115611d4b57600080fd5b6020830191508360208260051b850101111561191057600080fd5b60008060008060408587031215611d7c57600080fd5b84356001600160401b0380821115611d9357600080fd5b611d9f88838901611d22565b90965094506020870135915080821115611db857600080fd5b50611dc587828801611d22565b95989497509550505050565b6001600160a01b038116811461059c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e2457611e24611de6565b604052919050565b600082601f830112611e3d57600080fd5b81356001600160401b03811115611e5657611e56611de6565b611e69601f8201601f1916602001611dfc565b818152846020838601011115611e7e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611eb157600080fd5b8435611ebc81611dd1565b93506020850135611ecc81611dd1565b92506040850135915060608501356001600160401b03811115611eee57600080fd5b611efa87828801611e2c565b91505092959194509250565b60008060408385031215611f1957600080fd5b8235915060208301356001600160401b03811115611f3657600080fd5b611f4285828601611e2c565b9150509250929050565b60008060408385031215611f5f57600080fd5b8235611f6a81611dd1565b91506020830135611f7a81611dd1565b809150509250929050565b600060208284031215611f9757600080fd5b813561099881611dd1565b600080600060608486031215611fb757600080fd5b83356001600160401b03811115611fcd57600080fd5b84016101608187031215611fe057600080fd5b95602085013595506040909401359392505050565b6000806040838503121561200857600080fd5b823561201381611dd1565b915060208301356001600160401b03811115611f3657600080fd5b6000806000806060858703121561204457600080fd5b843561204f81611dd1565b93506020850135925060408501356001600160401b038082111561207257600080fd5b818701915087601f83011261208657600080fd5b81358181111561209557600080fd5b8860208285010111156120a757600080fd5b95989497505060200194505050565b60005b838110156120d15781810151838201526020016120b9565b50506000910152565b600081518084526120f28160208601602086016120b6565b601f01601f19169290920160200192915050565b60208152600061099860208301846120da565b600082601f83011261212a57600080fd5b813560206001600160401b0382111561214557612145611de6565b8160051b612154828201611dfc565b928352848101820192828101908785111561216e57600080fd5b83870192505b8483101561218d57823582529183019190830190612174565b979650505050505050565b600080600080600060a086880312156121b057600080fd5b85356121bb81611dd1565b945060208601356121cb81611dd1565b935060408601356001600160401b03808211156121e757600080fd5b6121f389838a01612119565b9450606088013591508082111561220957600080fd5b61221589838a01612119565b9350608088013591508082111561222b57600080fd5b5061223888828901611e2c565b9150509295509295909350565b60006020828403121561225757600080fd5b5035919050565b6000806040838503121561227157600080fd5b823561227c81611dd1565b91506020830135611f7a81611cef565b600080600080600060a086880312156122a457600080fd5b85356122af81611dd1565b945060208601356122bf81611dd1565b9350604086013592506060860135915060808601356001600160401b038111156122e857600080fd5b61223888828901611e2c565b634e487b7160e01b600052603260045260246000fd5b801515811461059c57600080fd5b60006020828403121561232a57600080fd5b81356109988161230a565b634e487b7160e01b600052601160045260246000fd5b60006001820161235d5761235d612335565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561240e57600080fd5b815161099881611dd1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061084a602083018486612419565b60006020828403121561246857600080fd5b5051919050565b8082018082111561088e5761088e612335565b60006020828403121561249457600080fd5b81516109988161230a565b8183823760009101908152919050565b6000806000606084860312156124c457600080fd5b8351925060208401516124d681611dd1565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b6000808335601e1984360301811261251557600080fd5b8301803591506001600160401b0382111561252f57600080fd5b60200191503681900382131561191057600080fd5b838152604060208201526000610e34604083018486612419565b60006020828403121561257057600080fd5b815161099881611cef565b82815260406020820152600061084a60408301846120da565b600082516125a68184602087016120b6565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205be0fac66562e9f0af53de7dda6374f4f68eee4ffe1761188f5d6b2378b23ed164736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c80639e5d4c49116100d1578063ce0617ec1161008a578063ee9c605411610064578063ee9c60541461047f578063f23a6e61146104c0578063fc0c546a146104e0578063fe9fbb801461051857610179565b8063ce0617ec14610434578063d087d2881461044a578063dd4670641461045f57610179565b80639e5d4c4914610361578063a4e2d63414610381578063affed0e014610398578063b0d691fe146103ad578063b3080c24146103e0578063bc197c811461041457610179565b80633a871cdd116101235780633a871cdd1461028a578063452a9320146102b85780634f1ef2861461030457806352d1902d146103175780637a8f73561461032c5780638da5cb5b1461034c57610179565b806301ffc9a714610181578063039721b1146101b6578063150b7a02146101d65780631626ba7e1461020f5780631f9838b51461022f5780633659cfe61461026a57610179565b3661017957610177610538565b005b610177610538565b34801561018d57600080fd5b506101a161019c366004611d05565b61059f565b60405190151581526020015b60405180910390f35b3480156101c257600080fd5b506101776101d1366004611d66565b61060e565b3480156101e257600080fd5b506101f66101f1366004611e9b565b6107df565b6040516001600160e01b031990911681526020016101ad565b34801561021b57600080fd5b506101f661022a366004611f06565b610852565b34801561023b57600080fd5b506101a161024a366004611f4c565b600260209081526000928352604080842090915290825290205460ff1681565b34801561027657600080fd5b50610177610285366004611f85565b610894565b34801561029657600080fd5b506102aa6102a5366004611fa2565b610979565b6040519081526020016101ad565b3480156102c457600080fd5b506102ec7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101ad565b610177610312366004611ff5565b61099f565b34801561032357600080fd5b506102aa610a6f565b34801561033857600080fd5b50610177610347366004611d66565b610b22565b34801561035857600080fd5b506102ec610cfb565b61037461036f36600461202e565b610d91565b6040516101ad9190612106565b34801561038d57600080fd5b5060005442106101a1565b3480156103a457600080fd5b506102aa610e3d565b3480156103b957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102ec565b3480156103ec57600080fd5b506102ec7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042057600080fd5b506101f661042f366004612198565b610ed5565b34801561044057600080fd5b506102aa60005481565b34801561045657600080fd5b506102aa610ef1565b34801561046b57600080fd5b5061017761047a366004612245565b610f47565b34801561048b57600080fd5b506102ec61049a36600461225e565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b3480156104cc57600080fd5b506101f66104db36600461228c565b611011565b3480156104ec57600080fd5b506104f561102d565b604080519384526001600160a01b039092166020840152908201526060016101ad565b34801561052457600080fd5b506101a1610533366004611f85565b611045565b600060016000610546610cfb565b6001600160a01b039081168252602080830193909352604091820160009081206001600160e01b03198235168252909352912054169050801561059c576000610592823460003661121f565b9050805160208201f35b50565b6000806001600160e01b031983166301ffc9a760e01b14806105d157506001600160e01b03198316630271189760e51b145b806105ec57506001600160e01b03198316630801407360e31b145b905080156105fd5750600192915050565b61060561129b565b50600092915050565b60005442101561063157604051636315bfbb60e01b815260040160405180910390fd5b600061063b610cfb565b9050336001600160a01b038216146106665760405163ea8e4eb560e01b815260040160405180910390fd5b838281146106875760405163b4fa3fb360e01b815260040160405180910390fd5b60005b818110156107ce578484828181106106a4576106a46122f4565b90506020020160208101906106b99190612318565b6001600160a01b0384166000908152600260205260408120908989858181106106e4576106e46122f4565b90506020020160208101906106f99190611f85565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f394777a58092892d136a90c4bb7e4350c72ac50fba6a0208128677f36527dcf583888884818110610755576107556122f4565b905060200201602081019061076a9190611f85565b87878581811061077c5761077c6122f4565b90506020020160208101906107919190612318565b604080516001600160a01b03948516815293909216602084015215159082015260600160405180910390a1806107c68161234b565b91505061068a565b506107d76112f4565b505050505050565b60006107e961129b565b60008060006107f66113a1565b925092509250468314801561081357506001600160a01b03821633145b801561081e57508581145b1561083c5760405163b79e3f3f60e01b815260040160405180910390fd5b50630a85bd0160e11b925050505b949350505050565b600061085c61129b565b6000610870610869610cfb565b85856113f4565b905080156108885750630b135d3f60e11b905061088e565b60009150505b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108e55760405162461bcd60e51b81526004016108dc90612364565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661092e6000805160206125b1833981519152546001600160a01b031690565b6001600160a01b0316146109545760405162461bcd60e51b81526004016108dc906123b0565b61095d81611455565b6040805160008082526020820190925261059c9183919061153d565b60006109836116ad565b61098d8484611725565b905061099882611801565b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109e75760405162461bcd60e51b81526004016108dc90612364565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a306000805160206125b1833981519152546001600160a01b031690565b6001600160a01b031614610a565760405162461bcd60e51b81526004016108dc906123b0565b610a5f82611455565b610a6b8282600161153d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b0f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108dc565b506000805160206125b183398151915290565b600054421015610b4557604051636315bfbb60e01b815260040160405180910390fd5b6000610b4f610cfb565b9050336001600160a01b03821614610b7a5760405163ea8e4eb560e01b815260040160405180910390fd5b83828114610b9b5760405163b4fa3fb360e01b815260040160405180910390fd5b60005b818110156107ce57848482818110610bb857610bb86122f4565b9050602002016020810190610bcd9190611f85565b6001600160a01b038416600090815260016020526040812090898985818110610bf857610bf86122f4565b9050602002016020810190610c0d9190611d05565b6001600160e01b0319168152602081019190915260400160002080546001600160a01b0319166001600160a01b03929092169190911790557f2c722487e90aca38ec1b074c3403210bd2bfb769b4da7f12f7bf0b9e37517c1883888884818110610c7957610c796122f4565b9050602002016020810190610c8e9190611d05565b878785818110610ca057610ca06122f4565b9050602002016020810190610cb59190611f85565b604080516001600160a01b0394851681526001600160e01b031993909316602084015292168183015290519081900360600190a180610cf38161234b565b915050610b9e565b600080600080610d096113a1565b925092509250468314610d20576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8991906123fc565b935050505090565b6060610d9c33611045565b610db95760405163ea8e4eb560e01b815260040160405180910390fd5b600054421015610ddc57604051636315bfbb60e01b815260040160405180910390fd5b83856001600160a01b03167f47d99ad340f52da66535aff7e10da1ceb85a32bcbd9fa1c42314d194545e14d28585604051610e18929190612442565b60405180910390a3610e286112f4565b610e348585858561121f565b95945050505050565b604051631aab3f0d60e11b8152306004820152600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906335567e1a906044015b602060405180830381865afa158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190612456565b905090565b6000610edf61129b565b5063bc197c8160e01b95945050505050565b604051631aab3f0d60e11b8152306004820152600060248201819052906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610e8f565b610f4f610cfb565b6001600160a01b0316336001600160a01b031614610f805760405163ea8e4eb560e01b815260040160405180910390fd5b600054421015610fa357604051636315bfbb60e01b815260040160405180910390fd5b610fb1426301e1338061246f565b811115610fd1576040516301814f7d60e31b815260040160405180910390fd5b60008190556040518181527fa7b24c66dd3269a292a60b3facdbb8f3e7557d1e19e64d99e0d6ee7250be63ad9060200160405180910390a161059c6112f4565b600061101b61129b565b5063f23a6e6160e01b95945050505050565b600080600061103a6113a1565b925092509250909192565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361108857506001919050565b60008060006110956113a1565b9250925092506000826001600160a01b0316636352211e836040518263ffffffff1660e01b81526004016110cb91815260200190565b602060405180830381865afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c91906123fc565b9050806001600160a01b0316866001600160a01b0316036111335750600195945050505050565b6001600160a01b038082166000908152600260209081526040808320938a168352929052205460ff161561116d5750600195945050505050565b46841415801561120257506040516333932be560e11b81526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063672657ca90602401602060405180830381865afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190612482565b156112135750600195945050505050565b50600095945050505050565b60606000856001600160a01b031685858560405161123e92919061249f565b60006040518083038185875af1925050503d806000811461127b576040519150601f19603f3d011682016040523d82523d6000602084013e611280565b606091505b50925090508061129257815160208301fd5b50949350505050565b6000600160006112a9610cfb565b6001600160a01b039081168252602080830193909352604091820160009081206001600160e01b03198235168252909352912054169050801561059c5760006105928260003661185a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461139f57604051630bd28e3b60e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630bd28e3b90602401600060405180830381600087803b15801561138657600080fd5b505af115801561139a573d6000803e3d6000fd5b505050505b565b604080516060808252608082019092526000918291829182919060208201818036833701905050905060ad604d60208301303c808060200190518101906113e891906124af565b93509350935050909192565b600080600061140385856118d2565b9092509050600081600481111561141c5761141c6124e8565b14801561143a5750856001600160a01b0316826001600160a01b0316145b8061144b575061144b868686611917565b9695505050505050565b61145d610cfb565b6001600160a01b0316336001600160a01b03161461148e5760405163ea8e4eb560e01b815260040160405180910390fd5b604051631506fd4d60e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631506fd4d90602401602060405180830381865afa1580156114f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151d9190612482565b905080610a6b57604051635abead2f60e11b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115755761157083611a03565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156115cf575060408051601f3d908101601f191682019092526115cc91810190612456565b60015b6116325760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016108dc565b6000805160206125b183398151915281146116a15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016108dc565b50611570838383611a9f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461139f5760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016108dc565b600080630b135d3f60e11b30631626ba7e61176d867f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b61177b6101408901896124fe565b6040518463ffffffff1660e01b815260040161179993929190612544565b602060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da919061255e565b6001600160e01b03191614905080156117f757600091505061088e565b5060019392505050565b801561059c57604051600090339060001990849084818181858888f193505050503d806000811461184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b606091505b5050505050565b60606000846001600160a01b0316848460405161187892919061249f565b600060405180830381855afa9150503d80600081146118b3576040519150601f19603f3d011682016040523d82523d6000602084013e6118b8565b606091505b5092509050806118ca57815160208301fd5b509392505050565b60008082516041036119085760208301516040840151606085015160001a6118fc87828585611ac4565b94509450505050611910565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b868660405160240161194192919061257b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161197f9190612594565b600060405180830381855afa9150503d80600081146119ba576040519150601f19603f3d011682016040523d82523d6000602084013e6119bf565b606091505b50915091508180156119d357506020815110155b801561144b57508051630b135d3f60e11b906119f89083016020908101908401612456565b149695505050505050565b6001600160a01b0381163b611a705760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108dc565b6000805160206125b183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611aa883611b88565b600082511180611ab55750805b156115705761139a8383611bc8565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611afb5750600090506003611b7f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611b4f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b7857600060019250925050611b7f565b9150600090505b94509492505050565b611b9181611a03565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061099883836040518060600160405280602781526020016125d1602791396060600080856001600160a01b031685604051611c059190612594565b600060405180830381855af49150503d8060008114611c40576040519150601f19603f3d011682016040523d82523d6000602084013e611c45565b606091505b509150915061144b8683838760608315611cc0578251600003611cb9576001600160a01b0385163b611cb95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108dc565b508161084a565b61084a8383815115611cd55781518083602001fd5b8060405162461bcd60e51b81526004016108dc9190612106565b6001600160e01b03198116811461059c57600080fd5b600060208284031215611d1757600080fd5b813561099881611cef565b60008083601f840112611d3457600080fd5b5081356001600160401b03811115611d4b57600080fd5b6020830191508360208260051b850101111561191057600080fd5b60008060008060408587031215611d7c57600080fd5b84356001600160401b0380821115611d9357600080fd5b611d9f88838901611d22565b90965094506020870135915080821115611db857600080fd5b50611dc587828801611d22565b95989497509550505050565b6001600160a01b038116811461059c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e2457611e24611de6565b604052919050565b600082601f830112611e3d57600080fd5b81356001600160401b03811115611e5657611e56611de6565b611e69601f8201601f1916602001611dfc565b818152846020838601011115611e7e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611eb157600080fd5b8435611ebc81611dd1565b93506020850135611ecc81611dd1565b92506040850135915060608501356001600160401b03811115611eee57600080fd5b611efa87828801611e2c565b91505092959194509250565b60008060408385031215611f1957600080fd5b8235915060208301356001600160401b03811115611f3657600080fd5b611f4285828601611e2c565b9150509250929050565b60008060408385031215611f5f57600080fd5b8235611f6a81611dd1565b91506020830135611f7a81611dd1565b809150509250929050565b600060208284031215611f9757600080fd5b813561099881611dd1565b600080600060608486031215611fb757600080fd5b83356001600160401b03811115611fcd57600080fd5b84016101608187031215611fe057600080fd5b95602085013595506040909401359392505050565b6000806040838503121561200857600080fd5b823561201381611dd1565b915060208301356001600160401b03811115611f3657600080fd5b6000806000806060858703121561204457600080fd5b843561204f81611dd1565b93506020850135925060408501356001600160401b038082111561207257600080fd5b818701915087601f83011261208657600080fd5b81358181111561209557600080fd5b8860208285010111156120a757600080fd5b95989497505060200194505050565b60005b838110156120d15781810151838201526020016120b9565b50506000910152565b600081518084526120f28160208601602086016120b6565b601f01601f19169290920160200192915050565b60208152600061099860208301846120da565b600082601f83011261212a57600080fd5b813560206001600160401b0382111561214557612145611de6565b8160051b612154828201611dfc565b928352848101820192828101908785111561216e57600080fd5b83870192505b8483101561218d57823582529183019190830190612174565b979650505050505050565b600080600080600060a086880312156121b057600080fd5b85356121bb81611dd1565b945060208601356121cb81611dd1565b935060408601356001600160401b03808211156121e757600080fd5b6121f389838a01612119565b9450606088013591508082111561220957600080fd5b61221589838a01612119565b9350608088013591508082111561222b57600080fd5b5061223888828901611e2c565b9150509295509295909350565b60006020828403121561225757600080fd5b5035919050565b6000806040838503121561227157600080fd5b823561227c81611dd1565b91506020830135611f7a81611cef565b600080600080600060a086880312156122a457600080fd5b85356122af81611dd1565b945060208601356122bf81611dd1565b9350604086013592506060860135915060808601356001600160401b038111156122e857600080fd5b61223888828901611e2c565b634e487b7160e01b600052603260045260246000fd5b801515811461059c57600080fd5b60006020828403121561232a57600080fd5b81356109988161230a565b634e487b7160e01b600052601160045260246000fd5b60006001820161235d5761235d612335565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561240e57600080fd5b815161099881611dd1565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600061084a602083018486612419565b60006020828403121561246857600080fd5b5051919050565b8082018082111561088e5761088e612335565b60006020828403121561249457600080fd5b81516109988161230a565b8183823760009101908152919050565b6000806000606084860312156124c457600080fd5b8351925060208401516124d681611dd1565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b6000808335601e1984360301811261251557600080fd5b8301803591506001600160401b0382111561252f57600080fd5b60200191503681900382131561191057600080fd5b838152604060208201526000610e34604083018486612419565b60006020828403121561257057600080fd5b815161099881611cef565b82815260406020820152600061084a60408301846120da565b600082516125a68184602087016120b6565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205be0fac66562e9f0af53de7dda6374f4f68eee4ffe1761188f5d6b2378b23ed164736f6c63430008130033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "entryPoint()": {
        "details": "Return the ERC-4337 entry point address"
      },
      "executeCall(address,uint256,bytes)": {
        "details": "executes a low-level call against an account if the caller is authorized to make calls"
      },
      "getNonce()": {
        "details": "返回账户的nonce对于特定key的nonce,使用entrypoint. getNonce(account, key)"
      },
      "isAuthorized(address)": {
        "details": "Returns the authorization status for a given caller"
      },
      "isLocked()": {
        "details": "returns the current lock status of the account as a boolean"
      },
      "isValidSignature(bytes32,bytes)": {
        "details": "EIP-1271 signature validation. By default, only the owner of the account is permissioned to sign. This function can be overriden."
      },
      "lock(uint256)": {
        "details": "locks the account until a certain timestamp"
      },
      "nonce()": {
        "details": "Returns the current account nonce"
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Allows ERC-1155 token batches to be received. This function can be overriden."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Allows ERC-1155 tokens to be received. This function can be overriden."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Allows ERC-721 tokens to be received so long as they do not cause an ownership cycle. This function can be overriden."
      },
      "owner()": {
        "details": "Returns the owner of the ERC-721 token which owns this account. By default, the owner of the token has full permissions on the account."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "setOverrides(bytes4[],address[])": {
        "details": "sets the implementation address for a given function call"
      },
      "setPermissions(address[],bool[])": {
        "details": "grants a given caller execution permissions"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if a given interfaceId is supported by this account. This method can be extended by an override."
      },
      "token()": {
        "details": "Returns the EIP-155 chain ID, token contract address, and token ID for the token that owns this account."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "_entryPoint": {
        "details": "ERC-4337 entry point address"
      },
      "guardian": {
        "details": "AccountGuardian contract address"
      },
      "lockedUntil": {
        "details": "timestamp at which this account will be unlocked"
      },
      "overrides": {
        "details": "mapping from owner => selector => implementation"
      },
      "permissions": {
        "details": "mapping from owner => caller => has permissions"
      }
    },
    "title": "A smart contract account owned by a single ERC721 token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getNonce()": {
        "notice": "返回顺序的下一个nonce值"
      },
      "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "notice": "验证用户的签名和nonce 子类不需要重写此方法 相反，它应该覆盖特定的内部验证方法"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7869,
        "contract": "contracts/ERC-6551-Full/Account_src/src/Account.sol:Account",
        "label": "lockedUntil",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7876,
        "contract": "contracts/ERC-6551-Full/Account_src/src/Account.sol:Account",
        "label": "overrides",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes4,t_address))"
      },
      {
        "astId": 7883,
        "contract": "contracts/ERC-6551-Full/Account_src/src/Account.sol:Account",
        "label": "permissions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}